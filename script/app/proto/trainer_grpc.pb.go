// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrainerClient is the client API for Trainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerClient interface {
	Train(ctx context.Context, in *TrainInfo, opts ...grpc.CallOption) (*TrainResult, error)
}

type trainerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerClient(cc grpc.ClientConnInterface) TrainerClient {
	return &trainerClient{cc}
}

func (c *trainerClient) Train(ctx context.Context, in *TrainInfo, opts ...grpc.CallOption) (*TrainResult, error) {
	out := new(TrainResult)
	err := c.cc.Invoke(ctx, "/pb.Trainer/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServer is the server API for Trainer service.
// All implementations must embed UnimplementedTrainerServer
// for forward compatibility
type TrainerServer interface {
	Train(context.Context, *TrainInfo) (*TrainResult, error)
	mustEmbedUnimplementedTrainerServer()
}

// UnimplementedTrainerServer must be embedded to have forward compatible implementations.
type UnimplementedTrainerServer struct {
}

func (UnimplementedTrainerServer) Train(context.Context, *TrainInfo) (*TrainResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedTrainerServer) mustEmbedUnimplementedTrainerServer() {}

// UnsafeTrainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServer will
// result in compilation errors.
type UnsafeTrainerServer interface {
	mustEmbedUnimplementedTrainerServer()
}

func RegisterTrainerServer(s grpc.ServiceRegistrar, srv TrainerServer) {
	s.RegisterService(&_Trainer_serviceDesc, srv)
}

func _Trainer_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Trainer/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServer).Train(ctx, req.(*TrainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trainer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Trainer",
	HandlerType: (*TrainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Train",
			Handler:    _Trainer_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trainer.proto",
}
